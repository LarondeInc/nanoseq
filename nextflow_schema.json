{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/nanoseq/master/nextflow_schema.json",
    "title": "nf-core/nanoseq pipeline parameters",
    "description": "A pipeline to demultiplex, QC and map Nanopore data",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "protocol"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/nanoseq/usage).",
                    "default": "s3://somefolder"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            }
        },
        "basecalling_demultiplexing_options": {
            "title": "Basecalling/demultiplexing options",
            "type": "object",
            "description": "Options required to basecall and demultiplex samples.",
            "default": "",
            "fa_icon": "fab fa-autoprefixer",
            "properties": {
                "input_path": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Path to Nanopore run directory files (e.g. 'fastq_pass/*') or a basecalled fastq file that requires demultiplexing. The latter can only be provided in conjunction with the '--skip_basecalling' parameter.",
                    "fa_icon": "far fa-file-code"
                },
                "flowcell": {
                    "type": "string",
                    "description": "Flowcell used to perform the sequencing e.g. 'FLO-MIN106'. Not required if '--guppy_config' is specified.",
                    "fa_icon": "fas fa-band-aid"
                },
                "kit": {
                    "type": "string",
                    "description": "Kit used to perform the sequencing e.g. 'SQK-LSK109'. Not required if '--guppy_config' is specified.",
                    "fa_icon": "fas fa-barcode"
                },
                "barcode_kit": {
                    "type": "string",
                    "description": "Barcode kit used to perform the sequencing e.g. 'SQK-PBK004'.",
                    "help_text": "If you would like to skip the basecalling (`--skip_basecalling`) but still perform the demultiplexing please specify a barcode kit that can be recognised by [qcat](https://github.com/nanoporetech/qcat):\n\n| `qcat` barcode kit specifications | description                                                                   |\n|-----------------------------------|-------------------------------------------------------------------------------|\n| `Auto`                            | Auto detect barcoding kit                                                     |\n| `RBK001`                          | Rapid barcoding kit                                                           |\n| `RBK004`                          | Rapid barcoding kit v4                                                        |\n| `NBD103/NBD104`                   | Native barcoding kit with barcodes 1-12                                       |\n| `NBD114`                          | Native barcoding kit with barcodes 13-24                                      |\n| `NBD104/NBD114`                   | Native barcoding kit with barcodes 1-24                                       |\n| `PBC001`                          | PCR barcoding kits with 12 barcodes                                           |\n| `PBC096`                          | PCR barcoding kits with 96 barcodes                                           |\n| `RPB004/RLB001`                   | Rapid PCR Barcoding Kit (SQK-RPB004) and Rapid Low Input by PCR Barcoding Kit |\n| `RPB004/LWB001`                   | Low Input by PCR Barcoding Kit                                                |\n| `RAB204`                          | 16S Rapid Amplicon Barcoding Kit with 12 Barcodes                             |\n| `VMK001`                          | Voltrax Barcoding Kit with 4 barcodes                                         |",
                    "fa_icon": "fas fa-barcode"
                },
                "barcode_both_ends": {
                    "type": "boolean",
                    "fa_icon": "fas fa-barcode",
                    "description": "Require barcode on both ends for Guppy basecaller."
                },
                "trim_barcodes": {
                    "type": "boolean",
                    "fa_icon": "fas fa-barcode",
                    "description": "Whether to trim the barcodes from the output sequences in the FastQ files from Guppy basecaller."
                },
                "guppy_config": {
                    "type": "string",
                    "help_text": "Cannot be used in conjunction with `--flowcell` and `--kit`. This can be a local file (e.g. `/your/dir/guppy_conf.cfg`) or a string specifying a configuration stored in the `/opt/ont/guppy/data/` directory of Guppy.",
                    "description": "Config file used for basecalling that will be passed to Guppy via the '--config' parameter.",
                    "fa_icon": "fas fa-fish"
                },
                "guppy_model": {
                    "type": "string",
                    "description": "Custom basecalling model file in `json` format that will be passed to Guppy via the '--model' parameter.",
                    "help_text": "Custom basecalling models can be trained with software such as [Taiyaki](https://github.com/nanoporetech/taiyaki). This can also be a string specifying a model stored in the `/opt/ont/guppy/data` directory of Guppy.",
                    "fa_icon": "fas fa-fish"
                },
                "guppy_gpu": {
                    "type": "boolean",
                    "description": "Whether to demultiplex with Guppy in GPU mode.",
                    "fa_icon": "fas fa-fish"
                },
                "guppy_gpu_runners": {
                    "type": "integer",
                    "default": 6,
                    "description": "Number of '--gpu_runners_per_device' used for Guppy when using '--guppy_gpu'.",
                    "fa_icon": "fas fa-fish"
                },
                "guppy_cpu_threads": {
                    "type": "integer",
                    "default": 1,
                    "description": "Number of '--cpu_threads_per_caller' used for Guppy when using '--guppy_gpu'.",
                    "fa_icon": "fas fa-fish"
                },
                "gpu_device": {
                    "type": "string",
                    "default": "auto",
                    "description": "Basecalling device specified to Guppy in GPU mode using '--device'.",
                    "fa_icon": "fas fa-fish"
                },
                "gpu_cluster_options": {
                    "type": "string",
                    "description": "Cluster options required to use GPU resources (e.g. '--part=gpu --gres=gpu:1').",
                    "fa_icon": "fas fa-fish"
                },
                "output_demultiplex_fast5": {
                    "type": "boolean",
                    "description": "Demultiplex fast5 files with demux_fast5.",
                    "fa_icon": "fas fa-file-code"
                },
                "qcat_min_score": {
                    "type": "integer",
                    "default": 60,
                    "description": "Specify the minimum quality score for qcat in the range 0-100.",
                    "fa_icon": "fas fa-cut"
                },
                "skip_basecalling": {
                    "type": "boolean",
                    "description": "Skip basecalling with Guppy.",
                    "fa_icon": "fas fa-fast-forward"
                },
                "skip_demultiplexing": {
                    "type": "boolean",
                    "description": "Skip demultiplexing with Guppy/qcat.",
                    "fa_icon": "fas fa-fast-forward"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "enable_conda": {
                    "type": "boolean",
                    "description": "Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.",
                    "hidden": true,
                    "fa_icon": "fas fa-bacon"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/basecalling_demultiplexing_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}
